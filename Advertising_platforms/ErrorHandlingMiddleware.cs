using System.ComponentModel.DataAnnotations;
using System.Net;
using System.Text.Json;

public class ErrorHandlingMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<ErrorHandlingMiddleware> _logger;

    public ErrorHandlingMiddleware(RequestDelegate next, ILogger<ErrorHandlingMiddleware> logger)
    {
        _next = next;
        _logger = logger;
    }

    public async Task Invoke(HttpContext context)
    {
        try
        {
            await _next(context);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Unhandled exception");

            await HandleExceptionAsync(context, ex);
        }
    }

    private static Task HandleExceptionAsync(HttpContext context, Exception ex)
    {
        HttpStatusCode status;
        string message;

        // üõ†Ô∏è –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏
        switch (ex)
        {
            case ArgumentException:
            case InvalidOperationException:
                status = HttpStatusCode.BadRequest; // 400
                message = ex.Message;
                break;

            case KeyNotFoundException:
                status = HttpStatusCode.NotFound; // 404
                message = "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω";
                break;

            // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            case ValidationException vex:
                status = HttpStatusCode.BadRequest; // 400
                message = vex.Message;
                break;

            default:
                status = HttpStatusCode.InternalServerError; // 500
                message = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";
                break;
        }

        var result = JsonSerializer.Serialize(new
        {
            status = (int)status,
            message
        });

        context.Response.ContentType = "application/json";
        context.Response.StatusCode = (int)status;

        return context.Response.WriteAsync(result);
    }
}
